{"version":3,"sources":["discovery.service.ts"],"names":[],"mappings":"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","file":"discovery.service.js","sourceRoot":"","sourcesContent":["import { Injectable, Inject, InjectionToken } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport'rxjs/Rx';\n\n\nimport { Http, Headers, Response } from '@angular/http';\nimport { ReplaySubject } from 'rxjs/ReplaySubject';\n\nexport const /** @type {?} */ DISCOVERY_SERVICE_CONFIG = new InjectionToken<DiscoveryServiceConfig>('service.discovery.config');\n\nexport interface DiscoveryServiceConfig {\n  apiEndpoint: string;\n}\n\nexport interface Service {\n  name: string;\n  url: string;\n  description: string;\n  shortDescription: string;\n  meta: any;\n}\nexport class DiscoveryService {\n  envUrl: string;\n  environment$: ReplaySubject<string> = new ReplaySubject(1);\n/**\n * @param {?} http\n * @param {?} discoveryServiceConfig\n */\nconstructor(private http: Http,\nprivate discoveryServiceConfig: any\n  ) {\n    this.environmentInit();\n  }\n/**\n * @param {?} filter\n * @return {?}\n */\nprivate filterPath(filter: string): string {\n    const /** @type {?} */ url = this.discoveryServiceConfig.apiEndpoint.replace(/\\/$/, '');\n    return url + '/services/' + filter.replace(/^\\//, '');\n  }\n/**\n * @param {?} service\n * @param {?} params\n * @return {?}\n */\nprivate serviceFilter(service: Service, params): boolean {\n    if (Array.isArray(params)) {\n      return (service.url.match(/%s/g) || []).length === params.length;\n    }\n    return !!(Object.keys(params).find((key) => service.url.indexOf('{' + key + '}') !== -1));\n  }\n/**\n * @param {?} service\n * @param {?} params\n * @return {?}\n */\nprivate serviceParamsInjection(service: Service, params): Service {\n    let /** @type {?} */ url;\n    if (Array.isArray(params)) {\n      url = params.reduce((urlAcc, param) =>\n        urlAcc.replace('%s', encodeURIComponent(param)), service.url);\n    }else {\n      url = params.reduce((urlAcc, param) =>\n        urlAcc.replace(new RegExp('\\{\\{' + param + '\\}\\}', 'g'), encodeURIComponent(params[param])), service.url);\n    }\n    return Object.assign({}, service, { url: url });\n  }\n/**\n * @param {?} filter\n * @param {?=} params\n * @return {?}\n */\nservices(filter: string, params = []): Observable<Service[]> {\n    return this.http\n      .get(this.filterPath(filter))\n      .map(r => r.json())\n      .map(sesvices => Object.keys(sesvices).map(k => sesvices[k])\n        .filter((service: Service) => this.serviceFilter(service, params))\n        .map(service => this.serviceParamsInjection(service, params))\n      );\n\n  }\n/**\n * @param {?} filter\n * @param {?} params\n * @return {?}\n */\nfirst(filter: string, params): Observable<Service> {\n    return this.services(filter, params)\n      .filter(sevices => sevices.length > 0)\n      .map(sevices => sevices[0]);\n  }\n/**\n * @template T\n * @param {?} filter\n * @param {?} params\n * @return {?}\n */\ncall<T>(filter: string, params): Observable<T> {\n    return this.first(filter, params)\n      .mergeMap(service => this.http.get(service.url))\n      .map(r => r.json());\n  }\n/**\n * @param {?} filter\n * @param {?} params\n * @return {?}\n */\ncallRaw(filter: string, params): Observable<Response> {\n    return this.first(filter, params)\n      .mergeMap(service => this.http.get(service.url));\n  }\n/**\n * @param {?=} refresh\n * @return {?}\n */\nenvironment(refresh = false): Observable<string> {\n    if (refresh) {\n      this.http.get(this.envUrl).map(r => r.text()).subscribe(env => this.environment$.next(env));\n    }\n    return this.environment$;\n  }\n/**\n * @return {?}\n */\nprivate environmentInit() {\n    this.envUrl = this.discoveryServiceConfig.apiEndpoint.replace(/\\/$/, '') + '/environment';\n    this.http.get(this.envUrl).map(r => r.text()).subscribe(env => this.environment$.next(env));\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Http, },\n{type: undefined, decorators: [{ type: Inject, args: [DISCOVERY_SERVICE_CONFIG, ] }, ]},\n];\n}\n\nfunction DiscoveryService_tsickle_Closure_declarations() {\n/** @type {?} */\nDiscoveryService.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nDiscoveryService.ctorParameters;\n/** @type {?} */\nDiscoveryService.prototype.envUrl;\n/** @type {?} */\nDiscoveryService.prototype.environment$;\n/** @type {?} */\nDiscoveryService.prototype.http;\n/** @type {?} */\nDiscoveryService.prototype.discoveryServiceConfig;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}