{"version":3,"sources":["discovery.directive.ts"],"names":[],"mappings":"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","file":"discovery.directive.js","sourceRoot":"","sourcesContent":["import { Directive, Input, TemplateRef, ViewContainerRef, OnInit, HostListener } from '@angular/core';\nimport { DiscoveryService, Service } from './discovery.service';\nexport class DiscoveryDirective implements OnInit {\n     ngxDiscovery: string;\n     ngxDiscoveryParams: any;\n     ngxDiscoveryTarget = '_blank';\nprivate _hasView = false;\nprivate service: Service;\n/**\n * @param {?} _viewContainer\n * @param {?} _template\n * @param {?} discovery\n */\nconstructor(private _viewContainer: ViewContainerRef,\nprivate _template: TemplateRef<Object>,\nprivate discovery: DiscoveryService) {\n        this._viewContainer.clear();\n    }\n/**\n * @param {?} e\n * @return {?}\n */\nonClick(e) {\n        if (this.service) {\n            e.preventDefault();\n            e.stopPropagation();\n            window.open(this.service.url, this.ngxDiscoveryTarget);\n        }\n    }\n/**\n * @return {?}\n */\nngOnInit() {\n        this.discovery\n            .first(this.ngxDiscovery, this.ngxDiscoveryParams)\n            .subscribe(service => {\n                this.service = service;\n                this.show();\n            });\n    }\n/**\n * @return {?}\n */\nprivate show() {\n        if (!this._hasView) {\n            this._hasView = true;\n            const /** @type {?} */ v = this._viewContainer.createEmbeddedView(this._template);\n            v.rootNodes[0].onclick = (e) => this.onClick(e);\n        }\n    }\n/**\n * @return {?}\n */\nprivate hide() {\n        if (this._hasView) {\n            this._hasView = false;\n            this._viewContainer.clear();\n        }\n    }\n\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: '[ngxDiscovery]'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n{type: TemplateRef, },\n{type: DiscoveryService, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'ngxDiscovery': [{ type: Input, args: ['ngxDiscovery', ] },],\n'ngxDiscoveryParams': [{ type: Input, args: ['ngxDiscoveryParams', ] },],\n'ngxDiscoveryTarget': [{ type: Input },],\n};\n}\n\nfunction DiscoveryDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nDiscoveryDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nDiscoveryDirective.ctorParameters;\n/** @type {?} */\nDiscoveryDirective.propDecorators;\n/** @type {?} */\nDiscoveryDirective.prototype.ngxDiscovery;\n/** @type {?} */\nDiscoveryDirective.prototype.ngxDiscoveryParams;\n/** @type {?} */\nDiscoveryDirective.prototype.ngxDiscoveryTarget;\n/** @type {?} */\nDiscoveryDirective.prototype._hasView;\n/** @type {?} */\nDiscoveryDirective.prototype.service;\n/** @type {?} */\nDiscoveryDirective.prototype._viewContainer;\n/** @type {?} */\nDiscoveryDirective.prototype._template;\n/** @type {?} */\nDiscoveryDirective.prototype.discovery;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}